// =======================================================================
// tokens.rs
// =======================================================================
// The tokens that a SystemVerilog source file is parsed into

use crate::*;
use logos::Logos;

#[derive(Logos, Debug, PartialEq)]
#[logos(skip r"\s+")]
#[logos(error = String)]
pub enum Token<'a> {
    // 1364-1995
    #[token("always")]
    Always,
    #[token("and")]
    And,
    #[token("assign")]
    Assign,
    #[token("begin")]
    Begin,
    #[token("buf")]
    Buf,
    #[token("bufif0")]
    Bufif0,
    #[token("bufif1")]
    Bufif1,
    #[token("case")]
    Case,
    #[token("casex")]
    Casex,
    #[token("casez")]
    Casez,
    #[token("cmos")]
    Cmos,
    #[token("deassign")]
    Deassign,
    #[token("default")]
    Default,
    #[token("defparam")]
    Defparam,
    #[token("disable")]
    Disable,
    #[token("edge")]
    Edge,
    #[token("else")]
    Else,
    #[token("end")]
    End,
    #[token("endcase")]
    Endcase,
    #[token("endfunction")]
    Endfunction,
    #[token("endmodule")]
    Endmodule,
    #[token("endprimitive")]
    Endprimitive,
    #[token("endspecify")]
    Endspecify,
    #[token("endtable")]
    Endtable,
    #[token("endtask")]
    Endtask,
    #[token("event")]
    Event,
    #[token("for")]
    For,
    #[token("force")]
    Force,
    #[token("forever")]
    Forever,
    #[token("fork")]
    Fork,
    #[token("function")]
    Function,
    #[token("highz0")]
    Highz0,
    #[token("highz1")]
    Highz1,
    #[token("if")]
    If,
    #[token("ifnone")]
    Ifnone,
    #[token("initial")]
    Initial,
    #[token("inout")]
    Inout,
    #[token("input")]
    Input,
    #[token("integer")]
    Integer,
    #[token("join")]
    Join,
    #[token("large")]
    Large,
    #[token("macromodule")]
    Macromodule,
    #[token("medium")]
    Medium,
    #[token("module")]
    Module,
    #[token("nand")]
    Nane,
    #[token("negedge")]
    Negedge,
    #[token("nmos")]
    Nmos,
    #[token("nor")]
    Nor,
    #[token("not")]
    Not,
    #[token("notif0")]
    Notif0,
    #[token("notif1")]
    Notif1,
    #[token("or")]
    Or,
    #[token("output")]
    Output,
    #[token("parameter")]
    Parameter,
    #[token("pmos")]
    Pmos,
    #[token("posedge")]
    Posedge,
    #[token("primitive")]
    Primitive,
    #[token("pull0")]
    Pull0,
    #[token("pull1")]
    Pull1,
    #[token("pulldown")]
    Pulldown,
    #[token("pullup")]
    Pullup,
    #[token("rcmos")]
    Rcmos,
    #[token("real")]
    Real,
    #[token("realtime")]
    Realtime,
    #[token("reg")]
    Reg,
    #[token("release")]
    Release,
    #[token("repeat")]
    Repeat,
    #[token("rnmos")]
    Rnmos,
    #[token("rpmos")]
    Rpmos,
    #[token("rtran")]
    Rtran,
    #[token("rtranif0")]
    Rtranif0,
    #[token("rtranif1")]
    Rtranif1,
    #[token("scalared")]
    Scalared,
    #[token("small")]
    Small,
    #[token("specify")]
    Specify,
    #[token("specparam")]
    Specparam,
    #[token("strong0")]
    Strong0,
    #[token("strong1")]
    Strong1,
    #[token("supply0")]
    Supply0,
    #[token("supply1")]
    Supply1,
    #[token("table")]
    Table,
    #[token("task")]
    Task,
    #[token("time")]
    Time,
    #[token("tran")]
    Tran,
    #[token("tranif0")]
    Tranif0,
    #[token("tranif1")]
    Tranif1,
    #[token("tri")]
    Tri,
    #[token("tri0")]
    Tri0,
    #[token("tri1")]
    Tri1,
    #[token("triand")]
    Triand,
    #[token("trior")]
    Trior,
    #[token("trireg")]
    Trireg,
    #[token("vectored")]
    Vectored,
    #[token("wait")]
    Wait,
    #[token("wand")]
    Wand,
    #[token("weak0")]
    Weak0,
    #[token("weak1")]
    Weak1,
    #[token("while")]
    While,
    #[token("wire")]
    Wire,
    #[token("wor")]
    Wor,
    #[token("xnor")]
    Xnor,
    #[token("xor")]
    Xor,
    // 1364-2001
    #[token("automatic")]
    Automatic,
    #[token("cell")]
    Cell,
    #[token("config")]
    Config,
    #[token("design")]
    Design,
    #[token("endconfig")]
    Endconfig,
    #[token("endgenerate")]
    Endgenerate,
    #[token("generate")]
    Generate,
    #[token("genvar")]
    Genvar,
    #[token("incdir")]
    Incdir,
    #[token("include")]
    Include,
    #[token("instance")]
    Instance,
    #[token("liblist")]
    Liblist,
    #[token("library")]
    Library,
    #[token("localparam")]
    Localparam,
    #[token("noshowcancelled")]
    Noshowcancelled,
    #[token("pulsestyle_ondetect")]
    PulsestyleOndetect,
    #[token("pulsestyle_onevent")]
    PulsestyleOnevent,
    #[token("showcancelled")]
    Showcancelled,
    #[token("signed")]
    Signed,
    #[token("unsigned")]
    Unsigned,
    #[token("use")]
    Use,
    // 1364-2005
    #[token("uwire")]
    Uwire,
    // 1800-2005
    #[token("alias")]
    Alias,
    #[token("always_comb")]
    AlwaysComb,
    #[token("always_ff")]
    AlwaysFf,
    #[token("always_latch")]
    AlwaysLatch,
    #[token("assert")]
    Assert,
    #[token("assume")]
    Assume,
    #[token("before")]
    Before,
    #[token("bind")]
    Bind,
    #[token("bins")]
    Bins,
    #[token("binsof")]
    Binsof,
    #[token("bit")]
    Bit,
    #[token("break")]
    Break,
    #[token("byte")]
    Byte,
    #[token("chandle")]
    Chandle,
    #[token("class")]
    Class,
    #[token("clocking")]
    Clocking,
    #[token("const")]
    Const,
    #[token("constraint")]
    Constraint,
    #[token("context")]
    Context,
    #[token("continue")]
    Continue,
    #[token("cover")]
    Cover,
    #[token("covergroup")]
    Covergroup,
    #[token("coverpoint")]
    Coverpoint,
    #[token("cross")]
    Cross,
    #[token("dist")]
    Dist,
    #[token("do")]
    Do,
    #[token("endclass")]
    Endclass,
    #[token("endclocking")]
    Endclocking,
    #[token("endgroup")]
    Endgroup,
    #[token("endinterface")]
    Endinterface,
    #[token("endpackage")]
    Endpackage,
    #[token("endprogram")]
    Endprogram,
    #[token("endproperty")]
    Endproperty,
    #[token("endsequence")]
    Endsequence,
    #[token("enum")]
    Enum,
    #[token("expect")]
    Expect,
    #[token("export")]
    Export,
    #[token("extends")]
    Extends,
    #[token("extern")]
    Extern,
    #[token("final")]
    Final,
    #[token("first_match")]
    FirstMatch,
    #[token("foreach")]
    Foreach,
    #[token("forkjoin")]
    Forkjoin,
    #[token("iff")]
    Iff,
    #[token("ignore_bins")]
    IgnoreBins,
    #[token("illegal_bins")]
    IllegalBins,
    #[token("import")]
    Import,
    #[token("inside")]
    Inside,
    #[token("int")]
    Int,
    #[token("interface")]
    Interface,
    #[token("intersect")]
    Intersect,
    #[token("join_any")]
    JoinAny,
    #[token("join_none")]
    JoinNone,
    #[token("local")]
    Local,
    #[token("logic")]
    Logic,
    #[token("longint")]
    Longint,
    #[token("matches")]
    Matches,
    #[token("modport")]
    Modport,
    #[token("new")]
    New,
    #[token("null")]
    Null,
    #[token("package")]
    Package,
    #[token("packed")]
    Packed,
    #[token("priority")]
    Priority,
    #[token("program")]
    Program,
    #[token("property")]
    Property,
    #[token("protected")]
    Protected,
    #[token("pure")]
    Pure,
    #[token("rand")]
    Rand,
    #[token("randc")]
    Randc,
    #[token("randcase")]
    Randcase,
    #[token("randsequence")]
    Randsequence,
    #[token("ref")]
    Ref,
    #[token("return")]
    Return,
    #[token("sequence")]
    Sequence,
    #[token("shortint")]
    Shortint,
    #[token("shortreal")]
    Shortreal,
    #[token("solve")]
    Solve,
    #[token("static")]
    Static,
    #[token("string")]
    String,
    #[token("struct")]
    Struct,
    #[token("super")]
    Super,
    #[token("tagged")]
    Tagged,
    #[token("this")]
    This,
    #[token("throughout")]
    Throughout,
    #[token("timeprecision")]
    Timeprecision,
    #[token("timeunit")]
    Timeunit,
    #[token("type")]
    Type,
    #[token("typedef")]
    Typedef,
    #[token("union")]
    Union,
    #[token("unique")]
    Unique,
    #[token("var")]
    Var,
    #[token("virtual")]
    Virtual,
    #[token("void")]
    Void,
    #[token("wait_order")]
    WaitOrder,
    #[token("wildcard")]
    Wildcard,
    #[token("with")]
    With,
    #[token("within")]
    Within,
    // 1800-2009
    #[token("accept_on")]
    AcceptOn,
    #[token("checker")]
    Checker,
    #[token("endchecker")]
    Endchecker,
    #[token("eventually")]
    Eventually,
    #[token("global")]
    Global,
    #[token("implies")]
    Implies,
    #[token("let")]
    Let,
    #[token("nexttime")]
    Nexttime,
    #[token("reject_on")]
    RejectOn,
    #[token("restrict")]
    Restrict,
    #[token("s_always")]
    SAlways,
    #[token("s_eventually")]
    SEventually,
    #[token("s_nexttime")]
    SNexttime,
    #[token("s_until")]
    SUntil,
    #[token("s_until_with")]
    SUntilWith,
    #[token("strong")]
    Strong,
    #[token("sync_accept_on")]
    SyncAcceptOn,
    #[token("sync_reject_on")]
    SyncRejectOn,
    #[token("unique0")]
    Unique0,
    #[token("until")]
    Until,
    #[token("until_with")]
    UntilWith,
    #[token("untyped")]
    Untyped,
    #[token("weak")]
    Weak,
    // 1800-2012
    #[token("implements")]
    Implements,
    #[token("interconnect")]
    Interconnect,
    #[token("nettype")]
    Nettype,
    #[token("soft")]
    Soft,
    // Directives
    #[token("`__FILE__")]
    DirUnderscoreFile,
    #[token("`__LINE__")]
    DirUnderscoreLine,
    #[token("`begin_keywords")]
    DirBeginKeywords,
    #[token("`celldefine")]
    DirCellDefine,
    #[token("`default_nettype")]
    DirDefaultNettype,
    #[token("`define")]
    DirDefine,
    #[token("`else")]
    DirElse,
    #[token("`elsif")]
    DirElsif,
    #[token("`end_keywords")]
    DirEndKeywords,
    #[token("`endcelldefine")]
    DirEndcelldefine,
    #[token("`endif")]
    DirEndif,
    #[token("`ifdef")]
    DirIfdef,
    #[token("`ifndef")]
    DirIfndef,
    #[token("`include")]
    DirInclude,
    #[token("`line")]
    DirLine,
    #[token("`nounconnected_drive")]
    DirNounconnectedDrive,
    #[token("`pragma")]
    DirPragma,
    #[token("`resetall")]
    DirResetall,
    #[token("`timescale")]
    DirTimescale,
    #[token("`unconnected_drive")]
    DirUnconnectedDrive,
    #[token("`undef")]
    DirUndef,
    #[token("`undefineall")]
    DirUndefineall,
    // Operators
    #[token("+")]
    Plus,
    #[token("-")]
    Minus,
    #[token("!")]
    Exclamation,
    #[token("~")]
    Tilde,
    #[token("&")]
    Amp,
    #[token("~&")]
    TildeAmp,
    #[token("|")]
    Pipe,
    #[token("~|")]
    TildePipe,
    #[token("^")]
    Caret,
    #[token("~^")]
    TildeCaret,
    #[token("^~")]
    CaretTilde,
    #[token("*")]
    Star,
    #[token("/")]
    Slash,
    #[token("%")]
    Percent,
    #[token("==")]
    EqEq,
    #[token("!=")]
    ExclEq,
    #[token("+=")]
    PlusEq,
    #[token("-=")]
    MinusEq,
    #[token("*=")]
    StarEq,
    #[token("/=")]
    SlashEq,
    #[token("%=")]
    PercentEq,
    #[token("&=")]
    AmpEq,
    #[token("|=")]
    PipeEq,
    #[token("^=")]
    CaretEq,
    #[token("===")]
    EqEqEq,
    #[token("!==")]
    ExclEqEq,
    #[token("==?")]
    EqEqQuest,
    #[token("!=?")]
    ExclEqQuest,
    #[token("&&")]
    AmpAmp,
    #[token("&&&")]
    AmpAmpAmp,
    #[token("||")]
    PipePipe,
    #[token("**")]
    StarStar,
    #[token("<")]
    Lt,
    #[token("<=")]
    LtEq,
    #[token(">")]
    Gt,
    #[token(">=")]
    GtEq,
    #[token(">>")]
    GtGt,
    #[token("<<")]
    LtLt,
    #[token(">>=")]
    GtGtEq,
    #[token("<<=")]
    LtLtEq,
    #[token(">>>")]
    GtGtGt,
    #[token("<<<")]
    LtLtLt,
    #[token(">>>=")]
    GtGtGtEq,
    #[token("<<<=")]
    LtLtLtEq,
    #[token("->")]
    MinusGt,
    #[token("<->")]
    LtMinusGt,
    #[token("++")]
    PlusPlus,
    #[token("--")]
    MinusMinus,
    #[token("+:")]
    PlusColon,
    #[token("-:")]
    MinusColon,
    #[token("+/-")]
    PlusSlashMinus,
    #[token("+%-")]
    PlusPercentMinus,
    // Symbols
    #[token("(")]
    Paren,
    #[token(")")]
    EParen,
    #[token("[")]
    Bracket,
    #[token("]")]
    EBracket,
    #[token("{")]
    Brace,
    #[token("}")]
    EBrace,
    #[token(":")]
    Colon,
    #[token(";")]
    SColon,
    #[token("'")]
    Apost,
    #[token(",")]
    Comma,
    #[token(".")]
    Period,
    #[token("#")]
    Pound,
    #[token("$")]
    Dollar,
    #[token("@")]
    At,
    #[token("@@")]
    AtAt,
    #[token("=")]
    Eq,
    #[token("::")]
    ColonColon,
    #[token(":=")]
    ColonEq,
    #[token(":/")]
    ColonSlash,
    #[token("##")]
    PoundPound,
    #[token("#-#")]
    PoundMinusPound,
    #[token("#=#")]
    PoundEqPound,
    #[token("=>")]
    EqGt,
    #[token(r#"""#)]
    Quote,
    #[token(r#"""""#)]
    QuoteQuoteQuote,
    #[token("\\")]
    Bslash,
    #[token("(*")]
    ParenStar,
    #[token("*)")]
    StarEparen,
    // Other Language Grammar
    #[token("std")]
    Std,
    #[token("PATHPULSE$")]
    PathpulseDollar,
    #[token("option")]
    Option,
    #[token("type_option")]
    TypeOption,
    #[token("sample")]
    Sample,
    #[token("$setup")]
    DollarSetup,
    #[token("$hold")]
    DollarHold,
    #[token("$setuphold")]
    DollarSetuphold,
    #[token("$recovery")]
    DollarRecovery,
    #[token("$removal")]
    DollarRemoval,
    #[token("$recrem")]
    DollarRecrem,
    #[token("$skew")]
    DollarSkew,
    #[token("$timeskew")]
    DollarTimeskew,
    #[token("$fullskew")]
    DollarFullskew,
    #[token("$period")]
    DollarPeriod,
    #[token("$width")]
    DollarWidth,
    #[token("$nochange")]
    DollarNochange,
    #[token("$root")]
    DollarRoot,
    #[token("$unit")]
    DollarUnit,
    // Comments
    #[regex(r"//[^\n]*", oneline_comment)]
    OnelineComment(&'a str),
    #[regex(r"/\*")]
    BlockCommentStart,
    #[regex(r"\*/")]
    BlockCommentEnd,
    BlockComment(&'a str), // Created from start and end in post-processing
    // Numbers
    #[regex(r"[0-9][0-9_]*", |lex| lex.slice())]
    UnsignedNumber(&'a str),
    #[regex(r"[0-9][0-9_]*\.[0-9][0-9_]*", |lex| lex.slice())]
    FixedPointNumber(&'a str),
    #[regex(r"([0-9][0-9_]*)?'[s|S]?(b|B)[0-1xXzZ\?][0-1xXzZ\?_]*", |lex| lex.slice())]
    BinaryNumber(&'a str),
    #[regex(r"([0-9][0-9_]*)?'[s|S]?(o|O)[0-7xXzZ\?][0-7xXzZ\?_]*", |lex| lex.slice())]
    OctalNumber(&'a str),
    #[regex(r"([0-9][0-9_]*)?'[s|S]?(d|D)[0-9][0-9_]*", |lex| lex.slice())]
    #[regex(r"([0-9][0-9_]*)?'[s|S]?(d|D)(x|X|z|Z)_*", |lex| lex.slice())]
    DecimalNumber(&'a str),
    #[regex(r"([0-9][0-9_]*)?'[s|S]?(h|H)[0-9a-fA-FxXzZ\?][0-9a-fA-FxXzZ\?_]*", |lex| lex.slice())]
    HexNumber(&'a str),
    #[regex(r"[0-9][0-9_]*(\.[0-9][0-9_]*)?(e|E)(\+|-)?[0-9][0-9_]*", |lex| lex.slice())]
    RealNumber(&'a str),
    // Literals
    #[regex(r"\$[a-zA-Z0-9_\$]+", |lex| lex.slice())]
    SystemIdentifier(&'a str),
    #[regex(r"[a-zA-Z_][a-zA-Z0-9_\$]*", |lex| lex.slice())]
    SimpleIdentifier(&'a str),
    #[regex(r"\[!-~]*\\s", |lex| lex.slice())]
    EscapedIdentifier(&'a str),
    #[regex(
        r"(([0-9][0-9_]*)|([0-9][0-9_]*\.[0-9][0-9_]*))[ \t]*(s|ms|us|ns|ps|fs)",
        time_literal
    )]
    TimeLiteral((&'a str, &'a str)),
    #[regex(
        r#""([^"\r\n\\]|\\[\x00-\x7F]|\\[0-7]{1,3}|\\x[0-9a-fA-F]{1,2})*""#,
        string_literal
    )]
    StringLiteral(&'a str),
    TripleQuoteStringLiteral(&'a str), // Created from start and end in post-processing
}
